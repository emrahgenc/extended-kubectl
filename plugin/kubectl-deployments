#!/bin/bash -e


function usage {  
    echo "***   GET DEPLOYMENTS   ***"
    echo "kubectl deployments"
    echo "  get"
    echo "     -c|--config|--configmap   [required]  The configmap name which stores the concerned key"
    echo "     -n|--namespace            [optional]  Defaults to current namespace"
    echo "     -k|--key                  [required]  Concerned key"    
    echo "Example:"
    echo "kubectl deployments get --config config-x --key key-y --namespace team-z"
    
    echo " "
    echo "*** RESTART DEPLOYMENTS ***"
    echo "kubectl deployments"
    echo "  restart"
    echo "     -c|--config|--configmap   [required]  The configmap name which stores the concerned key"
    echo "     -n|--namespace            [optional]  Defaults to current namespace"
    echo "     -k|--key                  [required]  Concerned key"    
    echo "Example:"
    echo "kubectl deployments restart --config config-x --key key-y --namespace team-z"
}


METHOD=""
NAMESPACE=default
CONFIG_MAP=""
KEY=""

while [[ $# -gt 0 ]]; do
  case $1 in
    get|restart)
      METHOD="$1"
      shift
      ;;
    version)
      METHOD="version"
      shift
      ;;
    -n|--namespace)
      NAMESPACE="$2"
      shift # past argument
      shift # past value
      ;;    
    -k|--key)
      KEY=$2
      shift # past argument
      shift # past value
      ;;
    -c|--config|--configmap)
      CONFIG_MAP=$2
      shift # past argument
      shift # past value
      ;;
    -h|--help) 
      usage; 
      exit 0
      ;;
    --default)
      NAMESPACE=default
      shift # past argument
      ;;
    -*|--*)
      if [[ $NAMESPACE == default ]]; then
        NAMESPACE="${1#--*}"        
      fi      
      shift
      ;;
    *)   
      if [[ "$CONFIG_MAP" == "" ]]; then
       CONFIG_MAP="$1"
      elif [[ "$KEY" == "" ]]; then
       KEY="$1"
      fi
      shift # past argument
      ;;
  esac
done

getdeployments(){ 
  if [[ "$KEY" == "" ]]; then
      kubectl get deployments --namespace "$NAMESPACE" -o json | jq -r --arg CONFIG_MAP $CONFIG_MAP ".items | map(select(.spec.template.spec.containers[]?.env[]?.valueFrom.configMapKeyRef.name == \"$CONFIG_MAP\") | .metadata.name)| .[]"    
  else
      kubectl get deployments --namespace "$NAMESPACE" -o json | jq -r --arg CONFIG_MAP $CONFIG_MAP --arg KEY $KEY ".items | map(select(.spec.template.spec.containers[]?.env[]?.valueFrom.configMapKeyRef.name == \"$CONFIG_MAP\" and .spec.template.spec.containers[]?.env[]?.valueFrom.configMapKeyRef.key == \"$KEY\" ) | .metadata.name) | .[]"     
  fi    
 }

case $METHOD in

  "get")
    getdeployments | uniq
    ;;
  
  "restart")
    DEPLOYMENTS=$(getdeployments | uniq)
    for value in $DEPLOYMENTS
    do
      kubectl rollout restart deployments/$value --namespace "$NAMESPACE"
    done
    ;;

  "version")
    echo "Version 1.0.0"
    ;;  
esac

